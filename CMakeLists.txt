PROJECT(gpendingpool_demo)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET (Tutorial_VERSION_MAJOR 1)
SET (Tutorial_VERSION_MINOR 0)
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
MESSAGE(${PROJECT_SOURCE_DIR})
MESSAGE(${PROJECT_BINARY_DIR})
SET (VERSION_MAJOR 1)
SET (VERSION_MINOR 0)
ENDIF()

ADD_DEFINITIONS(-D_DEBUG_LOG_)
ADD_DEFINITIONS(-D_NOTICE_LOG_)
ADD_DEFINITIONS(-D_WARNING_LOG_)
ADD_DEFINITIONS(-D_FATAL_LOG_)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -std=c++2a -fno-strict-aliasing -Wno-register")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++2a -fno-strict-aliasing -Wno-register")
SET(CMAKE_BUILD_TYPE "Debug")

FIND_PACKAGE(Boost REQUIRED COMPONENTS log)
IF(NOT Boost_FOUND)
    MESSAGE("Can not find Boost")
ENDIF()

ADD_DEFINITIONS(-DBOOST_SPIRIT_THREADSAFE)
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ADD_DEFINITIONS(-D_DEBUG)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/common/util/include")

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")

ADD_SUBDIRECTORY(common/util)
ADD_LIBRARY(gpendingpool STATIC ${PROJECT_SOURCE_DIR}/src/gpendingpool.cpp)
ADD_EXECUTABLE(gpendingpool_demo ${PROJECT_SOURCE_DIR}/demo.cpp)
TARGET_LINK_LIBRARIES(gpendingpool_demo common gpendingpool)
